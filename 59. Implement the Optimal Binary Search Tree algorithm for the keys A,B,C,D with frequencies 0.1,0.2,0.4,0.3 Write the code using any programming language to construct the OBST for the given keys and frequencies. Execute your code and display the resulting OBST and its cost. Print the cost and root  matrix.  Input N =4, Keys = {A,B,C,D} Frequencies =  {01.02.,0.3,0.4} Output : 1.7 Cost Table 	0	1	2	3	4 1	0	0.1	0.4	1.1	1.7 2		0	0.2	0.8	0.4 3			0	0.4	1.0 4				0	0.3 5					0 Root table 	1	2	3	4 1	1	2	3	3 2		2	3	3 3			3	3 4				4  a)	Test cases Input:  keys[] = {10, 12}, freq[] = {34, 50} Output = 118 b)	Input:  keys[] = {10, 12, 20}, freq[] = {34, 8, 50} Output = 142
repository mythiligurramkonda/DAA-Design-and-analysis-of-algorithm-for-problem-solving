import numpy as np

def optimal_bst(keys, freq):
    n = len(keys)
    
    # Initialize tables
    cost = np.zeros((n+1, n+1))
    root = np.zeros((n+1, n+1), dtype=int)
    
    # Calculate cost of single keys (cost[i][i] = freq[i])
    for i in range(1, n+1):
        cost[i][i] = freq[i-1]
        root[i][i] = i
    
    # Fill the cost and root tables
    for length in range(2, n+1):  # length of the subproblem
        for i in range(1, n-length+2):
            j = i + length - 1
            cost[i][j] = float('inf')
            # Try every root for the subproblem [i, j]
            for r in range(i, j+1):
                c = (cost[i][r-1] if r > i else 0) + \
                    (cost[r+1][j] if r < j else 0) + \
                    sum(freq[i-1:j])
                if c < cost[i][j]:
                    cost[i][j] = c
                    root[i][j] = r
    
    # Print Cost table
    print("Cost Table")
    for i in range(1, n+2):
        for j in range(i, n+2):
            print(f'{cost[i][j]:.1f}', end='\t')
        print()
    
    # Print Root table
    print("Root Table")
    for i in range(1, n+1):
        for j in range(i, n+1):
            print(root[i][j], end='\t')
        print()
    
    return cost[1][n]

# Test cases
keys1 = ['10', '12']
freq1 = [34, 50]
keys2 = ['10', '12', '20']
freq2 = [34, 8, 50]

print("Output for Test Case 1:", optimal_bst(keys1, freq1))  # Expected Output: 118
print("Output for Test Case 2:", optimal_bst(keys2, freq2))  # Expected Output: 142
