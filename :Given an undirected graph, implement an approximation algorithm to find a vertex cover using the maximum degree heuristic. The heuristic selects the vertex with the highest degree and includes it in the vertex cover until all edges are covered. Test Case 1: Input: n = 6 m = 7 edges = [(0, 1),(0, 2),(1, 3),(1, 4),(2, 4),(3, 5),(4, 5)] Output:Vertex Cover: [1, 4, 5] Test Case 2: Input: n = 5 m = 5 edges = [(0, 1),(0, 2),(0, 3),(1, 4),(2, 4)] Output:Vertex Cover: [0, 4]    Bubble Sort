def max_degree_vertex_cover(n, edges):
    from collections import defaultdict
    
    # Initialize degree count and edge set
    degree = defaultdict(int)
    edge_set = set(edges)
    
    for u, v in edges:
        degree[u] += 1
        degree[v] += 1
    
    vertex_cover = set()
    
    while edge_set:
        # Find vertex with maximum degree
        u = max(degree, key=lambda x: degree[x])
        vertex_cover.add(u)
        
        # Remove all edges incident to vertex u
        edge_set = {e for e in edge_set if u not in e}
        
        # Update degrees
        degree.pop(u, None)
        for v in list(degree):
            if (u, v) in edges or (v, u) in edges:
                degree[v] -= 1
    
    return list(vertex_cover)

# Test Case 1
n1 = 6
m1 = 7
edges1 = [(0, 1), (0, 2), (1, 3), (1, 4), (2, 4), (3, 5), (4, 5)]
vertex_cover1 = max_degree_vertex_cover(n1, edges1)
print("Test Case 1 Output:")
print("Vertex Cover:", vertex_cover1)
# Expected Output: Vertex Cover: [1, 4, 5]

# Test Case 2
n2 = 5
m2 = 5
edges2 = [(0, 1), (0, 2), (0, 3), (1, 4), (2, 4)]
vertex_cover2 = max_degree_vertex_cover(n2, edges2)
print("Test Case 2 Output:")
print("Vertex Cover:", vertex_cover2)
# Expected Output: Vertex Cover: [0, 4]
