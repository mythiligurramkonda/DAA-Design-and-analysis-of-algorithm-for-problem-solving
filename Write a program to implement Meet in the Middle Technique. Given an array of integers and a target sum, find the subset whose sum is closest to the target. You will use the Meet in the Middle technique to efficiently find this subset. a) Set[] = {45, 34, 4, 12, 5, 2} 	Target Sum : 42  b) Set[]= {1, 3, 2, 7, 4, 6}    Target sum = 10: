from itertools import combinations
import bisect
def generate_subset_sums(arr):
    subset_sums = set()
    n = len(arr)
    for i in range(n + 1):
        for comb in combinations(arr, i):
            subset_sums.add(sum(comb))
    return sorted(subset_sums)
def closest_subset_sum(arr, target):
    n = len(arr)
    mid = n // 2
    left_part = arr[:mid]
    right_part = arr[mid:    
    left_sums = generate_subset_sums(left_part)
    right_sums = generate_subset_sums(right_part)    
    closest_sum = float('inf')    
    for left_sum in left_sums:
        idx = bisect.bisect_left(right_sums, target - left_sum)       
        if idx < len(right_sums):
            right_sum = right_sums[idx]
            current_sum = left_sum + right_sum
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum        
        if idx > 0:
            right_sum = right_sums[idx - 1]
            current_sum = left_sum + right_sum
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum    
    return closest_sum
def main():
    arr1 = [45, 34, 4, 12, 5, 2]
    target1 = 42
    print("Closest sum to target for set 1:", closest_subset_sum(arr1, target1))
    arr2 = [1, 3, 2, 7, 4, 6]
    target2 = 10
    print("Closest sum to target for set 2:", closest_subset_sum(arr2, target2))
if __name__ == "__main__":
    main()
