def greedy_vertex_cover(n, edges):
    # Initialize vertex cover set
    vertex_cover = set()
    
    # Convert edge list to set for faster operations
    edge_set = set(edges)
    
    # Iterate while there are edges left
    while edge_set:
        # Pick an arbitrary edge
        u, v = edge_set.pop()
        
        # Add both vertices to the vertex cover
        vertex_cover.add(u)
        vertex_cover.add(v)
        
        # Remove all edges incident to these vertices
        edge_set = {e for e in edge_set if u not in e and v not in e}
    
    return list(vertex_cover)

# Test Case 1
n1 = 5
m1 = 6
edges1 = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 4), (3, 4)]
vertex_cover1 = greedy_vertex_cover(n1, edges1)
print("Test Case 1 Output:")
print("Vertex Cover:", vertex_cover1)
# Expected Output: Vertex Cover: [1, 2, 3]

# Test Case 2
n2 = 4
m2 = 4
edges2 = [(0, 1), (0, 2), (1, 2), (2, 3)]
vertex_cover2 = greedy_vertex_cover(n2, edges2)
print("Test Case 2 Output:")
print("Vertex Cover:", vertex_cover2)
# Expected Output: Vertex Cover: [0, 2]
