def find_ways(m, n, N, start_i, start_j)
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]    
    dp = [[[0] * n for _ in range(m)] for _ in range(N + 1)]
    dp[0][start_i][start_j] = 1    
    for step in range(N):
        new_dp = [[[0] * n for _ in range(m)] for _ in range(N + 1)]
        for i in range(m):
            for j in range(n):
                if dp[step][i][j] > 0:
                    for di, dj in directions:
                        ni, nj = i + di, j + dj
                        if 0 <= ni < m and 0 <= nj < n:
                            new_dp[step + 1][ni][nj] += dp[step][i][j]
                        else:
                            # Ball is out of bounds
                            new_dp[step + 1][0][0] += dp[step][i][j]
        dp = new_dp
    total_ways = 0
    for i in range(m):
        for j in range(n):
            total_ways += dp[N][i][j]   
    return total_ways
def main():
    m1, n1, N1, i1, j1 = 2, 2, 2, 0, 0
    print("Number of ways (test case 1):", find_ways(m1, n1, N1, i1, j1))    
    m2, n2, N2, i2, j2 = 1, 3, 3, 0, 1
    print("Number of ways (test case 2):", find_ways(m2, n2, N2, i2, j2))
if __name__ == "__main__":
    main()
