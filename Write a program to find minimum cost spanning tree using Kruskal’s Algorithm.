class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [1] * size
    
    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])  # Path compression
        return self.parent[u]
    
    def union(self, u, v):
        rootU = self.find(u)
        rootV = self.find(v)
        
        if rootU != rootV:
            if self.rank[rootU] > self.rank[rootV]:
                self.parent[rootV] = rootU
            elif self.rank[rootU] < self.rank[rootV]:
                self.parent[rootU] = rootV
            else:
                self.parent[rootV] = rootU
                self.rank[rootU] += 1
            return True
        return False

def kruskal(n, edges):
    # Initialize Union-Find
    uf = UnionFind(n)
    
    # Sort edges based on weight
    edges.sort(key=lambda edge: edge[2])
    
    mst_cost = 0
    mst_edges = []
    
    # Iterate through sorted edges
    for u, v, weight in edges:
        if uf.union(u, v):
            mst_cost += weight
            mst_edges.append((u, v, weight))
    
    return mst_cost, mst_edges

# Example Test Case
# Number of vertices
n = 4
# List of edges (u, v, weight)
edges = [
    (0, 1, 10),
    (0, 2, 6),
    (0, 3, 5),
    (1, 3, 15),
    (2, 3, 4)
]

mst_cost, mst_edges = kruskal(n, edges)
print("Minimum Cost of Spanning Tree:", mst_cost)
print("Edges in the Minimum Spanning Tree:", mst_edges)
