def median_of_medians(arr):
    def partition(arr, pivot):
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return left, middle, right

    def median(arr):
        arr.sort()
        return arr[len(arr) // 2]

    def select(arr, k):
        if len(arr) <= 5:
            return median(arr)
        medians = [median(arr[i:i+5]) for i in range(0, len(arr), 5)]
        pivot = median_of_medians(medians)
        left, middle, right = partition(arr, pivot)
        if k < len(left):
            return select(left, k)
        elif k < len(left) + len(middle):
            return pivot
        else:
            return select(right, k - len(left) - len(middle))

    return select(arr, len(arr) // 2)

# Example usage
if __name__ == "__main__":
    arr = [3, 6, 2, 8, 7, 5, 1, 4]
    print("Median:", median_of_medians(arr))
