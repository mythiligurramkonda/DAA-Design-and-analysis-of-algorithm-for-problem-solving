import itertools
def is_valid(graph, color, v, c):
    for neighbor in graph[v]:
        if color[neighbor] == c:
            return False
    return True
def graph_coloring_util(graph, color, v, num_colors):
    if v == len(graph):
        return True   
    for c in range(1, num_colors + 1):
        if is_valid(graph, color, v, c):
            color[v] = c
            if graph_coloring_util(graph, color, v + 1, num_colors):
                return True
            color[v] = 0
    return False
def find_min_colors(graph):
    num_vertices = len(graph)
    for num_colors in range(1, num_vertices + 1):
        color = [0] * num_vertices
        if graph_coloring_util(graph, color, 0, num_colors):
            return num_colors, color
    return None, Non
def max_personal_coloring(graph, num_colors):
    color = [0] * len(graph)
    if not graph_coloring_util(graph, color, 0, num_colors):
        return 0
    max_colored_by_you = 0
    for i in range(len(color)):
        if i % 3 == 0:
            max_colored_by_you += 1
    return max_colored_by_you
def main():
    edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
    n = 4 
    # Create adjacency list
    graph = [[] for _ in range(n)]
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
    num_colors, _ = find_min_colors(graph)
    max_colored_by_you = max_personal_coloring(graph, num_colors)    
    print(f"Minimum number of colors required: {num_colors}")
    print(f"Maximum number of regions you can color: {max_colored_by_you}")
if __name__ == "__main__":
    main()
