from collections import deque, defaultdict
def catMouseGame(graph):
    n = len(graph)    
    dp = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))    
    queue = deque()
    visited = set()  
    for mouse in range(n):
        for cat in range(n):
            if mouse == 0:
                dp[mouse][cat][0] = 1 
                dp[mouse][cat][1] = 1   
                queue.append((mouse, cat, 0))
                queue.append((mouse, cat, 1))
            if mouse == cat:
                dp[mouse][cat][1] = 2 
                dp[mouse][cat][0] = 2 
                queue.append((mouse, cat, 0))
                queue.append((mouse, cat, 1))    
    while queue:
        mouse, cat, turn = queue.popleft()        
        if (mouse, cat, turn) in visited:
            continue        
        visited.add((mouse, cat, turn))        
        if turn == 0:  # Mouse's turn
            for next_mouse in graph[mouse]:
                if next_mouse != cat and dp[next_mouse][cat][1] == 0:
                    dp[next_mouse][cat][1] = 1
                    queue.append((next_mouse, cat, 1))
                if dp[next_mouse][cat][1] == 0:
                    dp[next_mouse][cat][1] = 0
                    queue.append((next_mouse, cat, 1))
        else:  
            for next_cat in graph[cat]:
                if next_cat == 0:
                    continue
                for mouse in range(n):
                    if dp[mouse][next_cat][0] == 0:
                        dp[mouse][next_cat][0] = 2
                        queue.append((mouse, next_cat, 0))
                    if dp[mouse][next_cat][0] == 0:
                        dp[mouse][next_cat][0] = 0
                        queue.append((mouse, next_cat, 0))    
    return dp[1][2][0] 
graph1 = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
print(catMouseGame(graph1)) 
graph2 = [[1,3],[0],[3],[0,2]]
print(catMouseGame(graph2)) 
