from itertools import combinations
import bisect
def generate_subset_sums(arr):
    subset_sums = set()
    n = len(arr)
    for i in range(n + 1):
        for comb in combinations(arr, i):
            subset_sums.add(sum(comb))
    return sorted(subset_sums)
def has_subset_with_sum(arr, target):
    n = len(arr)
    mid = n // 2
    left_part = arr[:mid]
    right_part = arr[mid:]   
    left_sums = generate_subset_sums(left_part)
    right_sums = generate_subset_sums(right_part)    
    for left_sum in left_sums:
        if (target - left_sum) in right_sums:
            return True  
    return False
def main():
    arr1 = [1, 3, 9, 2, 7, 12]
    target1 = 15
    result1 = has_subset_with_sum(arr1, target1)
    print("Subset with exact sum 15 exists in set a:", result1)    
    arr2 = [3, 34, 4, 12, 5, 2]
    target2 = 15
    result2 = has_subset_with_sum(arr2, target2)
    print("Subset with exact sum 15 exists in set b:", result2)
if __name__ == "__main__":
    main()
