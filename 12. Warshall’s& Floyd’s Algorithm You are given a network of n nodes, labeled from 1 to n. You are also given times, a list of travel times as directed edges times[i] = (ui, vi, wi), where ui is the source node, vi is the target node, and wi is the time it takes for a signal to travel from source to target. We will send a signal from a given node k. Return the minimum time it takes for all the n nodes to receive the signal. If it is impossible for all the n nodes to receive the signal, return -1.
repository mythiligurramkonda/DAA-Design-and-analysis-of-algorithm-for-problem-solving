import heapq
import sys
def network_delay_time(times, n, k):
    graph = {i: [] for i in range(1, n + 1)}
    for u, v, w in times:
        graph[u].append((v, w))
    dist = {i: float('inf') for i in range(1, n + 1)}
    dist[k] = 0
    min_heap = [(0, k)]  # (distance, node)    
    while min_heap:
        curr_dist, u = heapq.heappop(min_heap)        
        # If the current distance is greater than the known shortest distance, skip
        if curr_dist > dist[u]:
            continue        
        for v, weight in graph[u]:
            distance = curr_dist + weight
            if distance < dist[v]:
                dist[v] = distance
                heapq.heappush(min_heap, (distance, v))    
    max_dist = max(dist.values())    
    return max_dist if max_dist < float('inf') else -1
# Example usage:
times1 = [(2, 1, 1), (2, 3, 1), (3, 4, 1)]
n1 = 4
k1 = 2
print(network_delay_time(times1, n1, k1))  

times2 = [(1, 2, 1)]
n2 = 2
k2 = 1
print(network_delay_time(times2, n2, k2)) 
