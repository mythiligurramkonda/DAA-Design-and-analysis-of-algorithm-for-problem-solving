import heapq
import math

def dijkstra(n, edges, source, target):
    # Convert edge list to adjacency list
    graph = [[] for _ in range(n)]
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))  # For undirected graph; remove this line if the graph is directed
    
    # Initialize distances and priority queue
    distances = [float('inf')] * n
    distances[source] = 0
    priority_queue = [(0, source)]  # (distance, vertex)
    
    while priority_queue:
        current_distance, u = heapq.heappop(priority_queue)
        
        if u == target:
            return current_distance
        
        if current_distance > distances[u]:
            continue
        
        for v, weight in graph[u]:
            distance = current_distance + weight
            if distance < distances[v]:
                distances[v] = distance
                heapq.heappush(priority_queue, (distance, v))
    
    return -1 if distances[target] == float('inf') else distances[target]

# Test Case 1
n1 = 6
edges1 = [(0, 1, 7), (0, 2, 9), (0, 5, 14), (1, 2, 10), (1, 3, 15),
          (2, 3, 11), (2, 5, 2), (3, 4, 6), (4, 5, 9)]
source1 = 0
target1 = 4
print("Test Case 1 Output:", dijkstra(n1, edges1, source1, target1))  # Expected Output: 20

# Test Case 2
n2 = 5
edges2 = [(0, 1, 10), (0, 4, 3), (1, 2, 2), (1, 4, 4), (2, 3, 9), (3, 2, 7),
          (4, 1, 1), (4, 2, 8), (4, 3, 2)]
source2 = 0
target2 = 3
print("Test Case 2 Output:", dijkstra(n2, edges2, source2, target2))  # Expected Output: 8
