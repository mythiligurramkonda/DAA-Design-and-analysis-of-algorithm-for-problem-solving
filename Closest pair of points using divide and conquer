import math

def closest_pair(points):
    def distance(p1, p2):
        return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

    def closest_pair_rec(px, py):
        if len(px) <= 3:
            return min(distance(px[i], px[j]) for i in range(len(px)) for j in range(i + 1, len(px)))
        
        mid = len(px) // 2
        mid_x = px[mid][0]
        Qx = px[:mid]
        Rx = px[mid:]
        Qy = [p for p in py if p[0] <= mid_x]
        Ry = [p for p in py if p[0] > mid_x]

        d1 = closest_pair_rec(Qx, Qy)
        d2 = closest_pair_rec(Rx, Ry)
        d = min(d1, d2)

        strip = [p for p in py if abs(p[0] - mid_x) < d]
        min_d = d

        for i in range(len(strip)):
            for j in range(i + 1, min(i + 7, len(strip))):
                min_d = min(min_d, distance(strip[i], strip[j]))

        return min_d

    points_x = sorted(points)
    points_y = sorted(points, key=lambda p: p[1])
    return closest_pair_rec(points_x, points_y)

# Example usage
if __name__ == "__main__":
    points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
    print("The smallest distance is:", closest_pair(points))
