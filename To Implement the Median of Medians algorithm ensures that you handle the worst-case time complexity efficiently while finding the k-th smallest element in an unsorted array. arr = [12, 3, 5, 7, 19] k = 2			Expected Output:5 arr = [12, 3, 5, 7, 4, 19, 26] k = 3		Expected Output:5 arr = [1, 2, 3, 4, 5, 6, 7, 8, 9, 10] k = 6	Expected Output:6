def median_of_medians(arr, k):
    def partition(arr, left, right, pivot_index):
        pivot_value = arr[pivot_index]
        # Move pivot to end
        arr[pivot_index], arr[right] = arr[right], arr[pivot_index]
        store_index = left
        # Move all smaller elements to the left
        for i in range(left, right):
            if arr[i] < pivot_value:
                arr[store_index], arr[i] = arr[i], arr[store_index]
                store_index += 1
        # Move pivot to its final place
        arr[right], arr[store_index] = arr[store_index], arr[right]
        return store_index

    def select(arr, left, right, k):
        if left == right:
            return arr[left]
        
        # Find the median of medians
        medians = []
        for i in range(left, right + 1, 5):
            sub_right = min(i + 4, right)
            median = sorted(arr[i:sub_right + 1])[len(arr[i:sub_right + 1]) // 2]
            medians.append(median)
        
        if len(medians) <= 5:
            pivot = sorted(medians)[len(medians) // 2]
        else:
            pivot = select(medians, 0, len(medians) - 1, len(medians) // 2)
        
        # Partition the array and get the pivot index
        pivot_index = arr.index(pivot)
        pivot_index = partition(arr, left, right, pivot_index)
        
        # Recursively select from the appropriate side
        if k == pivot_index:
            return arr[k]
        elif k < pivot_index:
            return select(arr, left, pivot_index - 1, k)
        else:
            return select(arr, pivot_index + 1, right, k)
    
    return select(arr, 0, len(arr) - 1, k)

# Test cases
def main():
    arr1 = [12, 3, 5, 7, 19]
    k1 = 2
    print("The", k1 + 1, "th smallest element is", median_of_medians(arr1, k1))

    arr2 = [12, 3, 5, 7, 4, 19, 26]
    k2 = 3
    print("The", k2 + 1, "th smallest element is", median_of_medians(arr2, k2))

    arr3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    k3 = 6
    print("The", k3 + 1, "th smallest element is", median_of_medians(arr3, k3))

if __name__ == "__main__":
    main()
