def is_valid(graph, color, v, c):
    for neighbor in graph[v]:
        if color[neighbor] == c:
            return False
    return True
def graph_coloring_util(graph, color, v, num_colors):
    if v == len(graph):
        return True
    for c in range(1, num_colors + 1):
        if is_valid(graph, color, v, c):
            color[v] = c
            if graph_coloring_util(graph, color, v + 1, num_colors):
                return True
            color[v] = 0
    return False
def find_min_colors(graph):
    num_vertices = len(graph)
    for num_colors in range(1, num_vertices + 1):
        color = [0] * num_vertices
        if graph_coloring_util(graph, color, 0, num_colors):
            return num_colors, color
    return None, None
def max_personal_coloring(graph):
    min_colors, coloring = find_min_colors(graph)
    if min_colors is None:
        return 0    
    max_colored_by_you = 0
    for i in range(len(coloring)):
        if i % 3 == 0:
            max_colored_by_you += 1
    return max_colored_by_you
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
graph = [[] for _ in range(n)]
for u, v in edges:
    graph[u].append(v)
    graph[v].append(u)
result = max_personal_coloring(graph)
print(f"Maximum number of regions you can color: {result}")
