import heapq

def k_closest_points(points, k):
    # Function to calculate the squared Euclidean distance from the origin
    def squared_distance(point):
        return point[0] ** 2 + point[1] ** 2
    
    # Create a max-heap with the first k points (negative distances to simulate max-heap)
    max_heap = []
    
    for point in points:
        dist = squared_distance(point)
        # Use negative distance to simulate max-heap behavior
        heapq.heappush(max_heap, (-dist, point))
        if len(max_heap) > k:
            heapq.heappop(max_heap)
    
    # Extract the k closest points
    closest_points = [point for (_, point) in max_heap]
    
    return closest_points

# Test cases
points1 = [[1, 3], [-2, 2], [5, 8], [0, 1]]
k1 = 2
print("Output:", k_closest_points(points1, k1))  # Expected: [[-2, 2], [0, 1]]

points2 = [[1, 3], [-2, 2]]
k2 = 1
print("Output:", k_closest_points(points2, k2))  # Expected: [[-2, 2]]

points3 = [[3, 3], [5, -1], [-2, 4]]
k3 = 2
print("Output:", k_closest_points(points3, k3))  # Expected: [[3, 3], [-2, 4]]
