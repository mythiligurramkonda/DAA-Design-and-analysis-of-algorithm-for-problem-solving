import numpy as np

def optimal_bst(keys, freq):
    n = len(keys)
    
    # Initialize the cost and root tables
    cost = np.zeros((n+1, n+1))
    root = np.zeros((n+1, n+1), dtype=int)
    
    # Initialize the cost of single nodes
    for i in range(1, n+1):
        cost[i][i] = freq[i-1]
        root[i][i] = i
    
    # Compute cost and root for all lengths of subproblems
    for length in range(2, n+1):  # length of subproblem
        for i in range(1, n-length+2):
            j = i + length - 1
            cost[i][j] = float('inf')
            # Try every root for the subproblem [i, j]
            for r in range(i, j+1):
                c = (cost[i][r-1] if r > i else 0) + \
                    (cost[r+1][j] if r < j else 0) + \
                    sum(freq[i-1:j])
                if c < cost[i][j]:
                    cost[i][j] = c
                    root[i][j] = r
    
    # Print Cost table
    print("Cost Table")
    for i in range(n):
        for j in range(i, n):
            print(f'{cost[i+1][j+1]:.1f}', end='\t')
        print()
    
    # Print Root table
    print("Root Table")
    for i in range(n):
        for j in range(i, n):
            print(root[i+1][j+1], end='\t')
        print()
    
    return cost[1][n]

# Test case
keys = [10, 12, 16, 21]
freq = [4, 2, 6, 3]

print("Output:", optimal_bst(keys, freq))
