def floyd_warshall(n, edges):
    inf = float('inf')
    dist = [[inf] * n for _ in range(n)]
    for i in range(n):
        dist[i][i] = 0
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    return dist
def find_city_with_smallest_reachable_count(n, edges, distanceThreshold):
  dist = floyd_warshall(n, edges)
    result_city = -1    
    for city in range(n):
        reachable_count = 0
        for other_city in range(n):
            if city != other_city and dist[city][other_city] <= distanceThreshold:
                reachable_count += 1        
        if (reachable_count < min_reachable_count) or \
           (reachable_count == min_reachable_count and city > result_city):
            min_reachable_count = reachable_count
            result_city = city    
    return result_city
n1, edges1, distanceThreshold1 = 4, [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], 4
print(find_city_with_smallest_reachable_count(n1, edges1, distanceThreshold1))
n2, edges2, distanceThreshold2 = 5, [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], 2
print(find_city_with_smallest_reachable_count(n2, edges2, distanceThreshold2))  # Output: 0
