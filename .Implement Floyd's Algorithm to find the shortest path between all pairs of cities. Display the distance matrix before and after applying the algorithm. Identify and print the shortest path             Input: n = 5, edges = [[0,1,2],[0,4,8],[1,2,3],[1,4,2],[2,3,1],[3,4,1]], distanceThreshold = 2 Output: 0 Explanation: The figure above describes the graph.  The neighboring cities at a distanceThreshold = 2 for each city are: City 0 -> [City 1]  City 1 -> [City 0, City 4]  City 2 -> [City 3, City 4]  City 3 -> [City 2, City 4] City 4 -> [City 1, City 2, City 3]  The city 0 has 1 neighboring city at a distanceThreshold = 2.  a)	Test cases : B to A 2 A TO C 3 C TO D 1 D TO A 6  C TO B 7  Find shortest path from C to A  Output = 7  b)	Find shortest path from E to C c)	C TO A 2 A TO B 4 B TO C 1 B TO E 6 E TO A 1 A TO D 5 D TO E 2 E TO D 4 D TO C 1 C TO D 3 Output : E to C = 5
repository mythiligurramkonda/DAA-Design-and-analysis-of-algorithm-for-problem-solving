import numpy as np
def floyd_warshall(n, edges):
    dist = np.full((n, n), np.inf)
    np.fill_diagonal(dist, 0)    
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w  # For undirected graph
    print("Distance Matrix before Floyd-Warshall Algorithm:")
    print(dist)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    print("Distance Matrix after Floyd-Warshall Algorithm:")
    print(dist)
    return dist
def shortest_path(dist, start, end):
    return dist[start][end]
n = 5
edges = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]]
dist_matrix = floyd_warshall(n, edges)
def print_shortest_path(dist_matrix, start, end):
    result = shortest_path(dist_matrix, start, end)
    print(f"Shortest path from {start} to {end} is: {result}")
print_shortest_path(dist_matrix, 2, 0)  # Example for C to A
print_shortest_path(dist_matrix, 4, 2)  # Example for E to C (E = 4, C = 2)
print_shortest_path(dist_matrix, 0, 2)  # Example for E to C in a different graph

